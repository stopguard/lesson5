"""
Есть два списка
        tutors = ['Иван', 'Анастасия', 'Петр', 'Сергей', 'Дмитрий', 'Борис', 'Елена']
        klasses = ['9А', '7В', '9Б', '9В', '8Б', '10А', '10Б', '9А']
    Необходимо реализовать генератор, возвращающий кортежи вида (<tutor>, <klass>)
    Количество генерируемых кортежей не должно быть больше длины списка tutors.
    Если в списке klasses меньше элементов, чем в списке tutors, необходимо вывести последние кортежи в виде:
        (<tutor>, None)
    Доказать, что вы создали именно генератор. Проверить его работу вплоть до истощения.
"""
# создаём первые 2 списка
tutors = ['Иван', 'Анастасия', 'Петр', 'Сергей', 'Дмитрий', 'Борис', 'Елена']
klasses = ['9А', '7В', '9Б', '9В', '8Б', '10А', '10Б', '9А']

# создаём вторые 2 списка
tutors2 = ['Иван', 'Анастасия', 'Петр', 'Сергей', 'Дмитрий', 'Борис', 'Елена', 'Сергей', 'Дмитрий', 'Борис']
klasses2 = ['9А', '7В', '9Б', '9В', '8Б', '10А', '10Б', '9А']


def gen_gen(t, k):
    """Генерирует генераторы, принимает 2 списка, возвращает генератор с кортежами"""
    klas = k[:]                             # забираем копию списка классов чтоб список классов не поломать
    if len(t) > len(k):                     # если список классов короче
        for itm in range(len(t) - len(klas)):   # повторяем недостающее количество раз
            klas.append(None)                       # добавление пустых элементов
    for tutor, klass in zip(t, klas):         # собственно генератор идущий параллельно по спискам
        yield tutor, klass                        # и возвращающий кортеж из tutor и klass


tut_klass_gen = gen_gen(tutors, klasses)        # генератор из списков где len(klasses) > len(tutors)
tut_klass_gen2 = gen_gen(tutors2, klasses2)     # генератор из списков где len(klasses) < len(tutors)
print(type(tut_klass_gen), '\n', *tut_klass_gen, '\n')  # демонстрируем тип и содержимое первого генератора
print(type(tut_klass_gen2), '\n', *tut_klass_gen2)      # демонстрируем тип и содержимое второго генератора
